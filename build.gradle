buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath("org.kohsuke:github-api:1.313")
	}
}

plugins {
	id("fabric-loom") version("+")
	id("io.github.juuxel.loom-quiltflower") version("+")
	id("org.ajoberstar.grgit") version("+")
	id("com.modrinth.minotaur") version("+")
	id("com.matthewprenger.cursegradle") version("+")
	id("maven-publish")
	id("eclipse")
	id("idea")
	id("java-library")
}

project.ext.release = findProperty("releaseType") == "stable"

setArchivesBaseName(project.archives_base_name)
setVersion(getVersion())
setGroup(project.maven_group)

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

loom {
	setRuntimeOnlyLog4j(true)

	runs {
		testmodClient {
			client()
			ideConfigGenerated(project.rootProject == project)
			name("Testmod Client")
			source(sourceSets.testmod)
		}
		testmodServer {
			server()
			ideConfigGenerated(project.rootProject == project)
			name("Testmod Server")
			source(sourceSets.testmod)
		}
	}

	mixin {
		setDefaultRefmapName("mixins.configurable_data_fixers.refmap.json")
	}

	setAccessWidenerPath(file("src/main/resources/configurable_data_fixers.accesswidener"))
	interfaceInjection {
		// When enabled, injected interfaces from dependecies will be applied.
		setEnableDependencyInterfaceInjection(false)
		//enableDependencyInterfaceInjection = false
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
					"src/main/generated"
			]
		}
	}
}

loom {
	runs {
		datagen {
			inherit(client)
			name("Data Generation")
			vmArg("-Dfabric-api.datagen")
			vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")
			//vmArg("-Dfabric-api.datagen.strict-validation")
			vmArg("-Dfabric-api.datagen.modid=configurabledatafixers")

			setIdeConfigGenerated(true)
			setRunDir("build/datagen")
		}
	}
}

configurations {
	includeModImplementation
	includeImplementation

	include.extendsFrom(includeImplementation)
	include.extendsFrom(includeModImplementation)

	implementation.extendsFrom(includeImplementation)
	modImplementation.extendsFrom(includeModImplementation)
}

sourceSets {
	api {
		java {
			compileClasspath += main.compileClasspath
		}
	}

	main {
		java {
			compileClasspath += api.output
			runtimeClasspath += api.output
		}
	}
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	maven {
		setUrl("https://jitpack.io")
	}
	maven {
		setName("Modrinth")
		setUrl("https://api.modrinth.com/maven")

		content {
			includeGroup("maven.modrinth")
		}
	}
	maven {
		setUrl("https://maven.terraformersmc.com")

		content {
			includeGroup("com.terraformersmc")
		}
	}
	maven {
		setUrl("https://maven.shedaniel.me/")
	}
	maven {
		setUrl("https://cursemaven.com")

		content {
			includeGroup("curse.maven")
		}
	}
	/*maven {
		setName("Siphalor's Maven")
		setUrl("https://maven.siphalor.de")
	}*/
	maven {
		setUrl("https://maven.flashyreese.me/releases")
	}
	maven {
		setUrl("https://maven.flashyreese.me/snapshots")
	}
	maven {
		setUrl("https://maven.minecraftforge.net/")
	}
	maven {
		setUrl("https://maven.parchmentmc.org")
	}
	maven {
		setName("Quilt")
		setUrl("https://maven.quiltmc.org/repository/release")
	}

	flatDir {
		dirs("libs")
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft("com.mojang:minecraft:${minecraft_version}")
	mappings(loom.layered {
		// please annoy treetrain if this doesnt work
		it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:intermediary-v2")
		it.parchment("org.parchmentmc.data:parchment-1.19.3:${parchment_mappings}@zip")
		it.officialMojangMappings {
			setNameSyntheticMembers(false)
		}
	})
	modImplementation("net.fabricmc:fabric-loader:${loader_version}")

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_version}")

	// FrozenLib
	include(modImplementation("maven.modrinth:frozenlib:${frozenlib_version}"))

	testmodImplementation(sourceSets.main.output)

	// Sodium
	modCompileOnly("maven.modrinth:sodium:${sodium_version}")
	modCompileOnly("org.joml:joml:1.10.4")
	modCompileOnly("org.anarres:jcpp:1.4.14")

	// only affects runClient, does not affect gradlew build.
	// add -PuseThirdPartyMods=false to not use these
	/*if (findProperty("useThirdPartyMods") != "false") {
		modRuntimeOnly("maven.modrinth:ferrite-core:${ferritecore_version}")
		modRuntimeOnly("maven.modrinth:lazydfu:${lazydfu_version}")
		modRuntimeOnly("maven.modrinth:starlight:${starlight_version}")
		modRuntimeOnly("maven.modrinth:lithium:${lithium_version}")
		modRuntimeOnly("maven.modrinth:fastanim:${fastanim_version}")

		modRuntimeOnly("maven.modrinth:entityculling:${entityculling_version}")
		modRuntimeOnly("maven.modrinth:memoryleakfix:${memoryleakfix_version}")
		modRuntimeOnly("maven.modrinth:no-unused-chunks:${no_unused_chunks_version}")
	}

	// only affects runClient, does not affect gradlew build.
	// add -PuseExperimentalThirdParty=true to the gradle runClient
	// command to use these
	if (findProperty("useExperimentalThirdParty") == "true") {
		modRuntimeOnly("maven.modrinth:terralith:${terralith_version}")
		modRuntimeOnly("maven.modrinth:sodium:${sodium_version}")
		modRuntimeOnly("org.joml:joml:1.10.4")
		modRuntimeOnly("org.anarres:jcpp:1.4.14")
		//modRuntimeOnly "maven.modrinth:iris:${iris_version}"
		modRuntimeOnly("maven.modrinth:indium:${indium_version}")
		modRuntimeOnly("me.flashyreese.mods:reeses-sodium-options:${reeses_sodium_options_version}") {
			exclude(group: "net.coderbot.iris_mc1_19", module: "iris")
		}
		modRuntimeOnly("me.flashyreese.mods:sodium-extra-fabric:${sodium_extra_version}")
		modRuntimeOnly("io.github.douira:glsl-transformer:0.27.0")
	}*/
}


processResources {
	Map<String, Object> properties = new HashMap<>()
	properties.put("version", project.version)
	properties.put("minecraft_version", "1.19.4-")

	properties.forEach((a, b) -> inputs.property(a, b))

	filesMatching("fabric.mod.json") {
		expand(properties)
	}
}

quiltflower {
	quiltflowerVersion.set("1.9.0")
}

javadoc {
	options.tags = ["reason"]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	setClassifier("javadoc")
	from(javadoc.destinationDir)
}

task sourcesJar(type: Jar, dependsOn: classes) {
	setClassifier("sources")
	from(sourceSets.main.allSource)
}

tasks.withType(JavaCompile).configureEach {
	it.options.setEncoding("UTF-8")
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.setRelease(17)
	options.setFork(true)
	options.setIncremental(true)
}

tasks.withType(Test).configureEach {
	setMaxParallelForks(Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}

java {
	setSourceCompatibility(JavaVersion.VERSION_17)
	setTargetCompatibility(JavaVersion.VERSION_17)

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

artifacts {
	archives(sourcesJar)
	archives(javadocJar)
}

String getVersion() {
	String version = "${mod_version}-${mod_loader}+${minecraft_version}"

	if (!project.release) {
		version += "-unstable"
	}

	return version
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

apply from: "gradle/publishing.gradle"
