pluginManagement {
    repositories {
        maven {
            setName("Quilt")
            setUrl("https://maven.quiltmc.org/repository/release/")
        }
        maven {
            setName("Quilt Snapshot")
            setUrl("https://maven.quiltmc.org/repository/snapshot/")
        }
        maven {
            setName("Fabric")
            setUrl("https://maven.fabricmc.net/")
        }
        jcenter()
        maven {
            setName("Forge")
            setUrl("https://files.minecraftforge.net/maven/")
        }
        maven {
            setName("Jitpack")
            setUrl("https://jitpack.io/")
        }
        mavenCentral()
        gradlePluginPortal()
    }
}

rootProject.setName("Configurable Data Fixers")

localRepository("FrozenLib", "Configurable-Data-Fixers")

def localRepository(String mod, String projectFileName) {
	boolean allowLocalModUse = false
	boolean allowLocalModInConsoleMode = true

	boolean isIDE = properties.containsKey("android.injected.invoked.from.ide"
			|| (System.getenv("XPC_SERVICE_NAME") ?: "").contains("intellij")
			|| (System.getenv("XPC_SERVICE_NAME") ?: "").contains(".idea")
			|| System.getenv("IDEA_INITIAL_DIRECTORY") != null)

	def path = "../" + mod
	def file = new File(path)

	def pathGitHub = "../" + projectFileName + "/" + mod
	def fileGitHub = new File(pathGitHub)

	def prefixedModName = ":" + mod

	if (allowLocalModUse && (isIDE || allowLocalModInConsoleMode) && file.exists()) {
		include(prefixedModName)
		project(prefixedModName).setProjectDir(file)
		project(prefixedModName).setBuildFileName("./build.gradle")
	} else if (allowLocalModUse && (isIDE || allowLocalModInConsoleMode) && fileGitHub.exists()) {
		include(prefixedModName)
		project(prefixedModName).setProjectDir(fileGitHub)
		project(prefixedModName).setBuildFileName("./build.gradle")
	}
}
