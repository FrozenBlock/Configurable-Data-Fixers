buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath("org.kohsuke:github-api:1.313")
	}
}

import java.nio.file.Files

ext {
	Properties properties = new Properties()
	properties.load(new FileInputStream(file("gradle/publishing.properties")))
	properties.forEach((a, b) -> set(a, b))

	modrinth_version = makeModrinthVersion(mod_version)
	display_name = makeName(mod_version)

	changelog_text = getChangelog(file(changelog_file))
}

String makeName(String version) {
	return "${version} (${minecraft_version})"
}

String makeModrinthVersion(String version) {
	return "${version}-mc${minecraft_version}"
}

static String getChangelog(File changelogFile) {
	String text = Files.readString(changelogFile.toPath())
	String[] split = text.split("-----------------")
	if (split.length != 2)
		throw new IllegalStateException("Malformed changelog")
	return split[1].trim()
}

curseforge {
	String token = System.getenv("CURSEFORGE_TOKEN")
	apiKey = token == null || token.isEmpty() ? "unset" : token
	String gameVersion = curseforge_minecraft_version != "null" ? curseforge_minecraft_version : minecraft_version
	project {
		id = curseforge_id
		changelog = changelog_text
		releaseType = release_type
		addGameVersion("Fabric")
		addGameVersion("Quilt")
		addGameVersion(gameVersion)
		relations {
			requiredDependency("fabric-api")
			embeddedLibrary("frozenlib")
		}
		mainArtifact(file("build/libs/${remapJar.archiveBaseName.get()}-${version}.jar")) {
			displayName = display_name
		}
		afterEvaluate {
			uploadTask.dependsOn(remapJar)
		}
	}
	curseGradleOptions.forgeGradleIntegration = false
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = modrinth_id
	versionNumber = modrinth_version
	versionName = display_name
	versionType = release_type
	changelog = changelog_text
	uploadFile = file("build/libs/${remapJar.archiveBaseName.get()}-${version}.jar")
	gameVersions = [minecraft_version]
	loaders = ["fabric", "quilt"]
	dependencies {
		required.project("fabric-api")
		embedded.project("frozenlib")
	}
}

def getBranch() {
	def env = System.getenv()
	if (env.GITHUB_REF) {
		def branch = env.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	if (grgit == null) {
		return "unknown"
	}

	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

tasks.register('github') {
	dependsOn remapJar
	def env = System.getenv()
	onlyIf {
		env.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(env.GITHUB_TOKEN as String)
		def repository = github.getRepository(env.GITHUB_REPOSITORY)

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("$project.version-$project.minecraft_version")
		releaseBuilder.body(changelog_text)
		releaseBuilder.commitish(getBranch())
		releaseBuilder.prerelease(release_type != "release")

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(remapJar.archiveFile.get().getAsFile(), "application/java-archive")
		ghRelease.uploadAsset(remapSourcesJar.archiveFile.get().getAsFile(), "application/java-archive")
		ghRelease.uploadAsset(javadocJar.archiveFile.get().getAsFile(), "application/java-archive")
	}
}

tasks.register('publishMod') {
	//dependsOn(github)
	dependsOn(tasks.getByName("curseforge"))
	dependsOn(tasks.getByName("modrinth"))
}
